// <auto-generated />
using System;
using Exam_Online.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Exam_Online.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Exam_Online.Models.Question.Choice", b =>
                {
                    b.Property<int>("ChoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Label");

                    b.Property<string>("Points");

                    b.Property<int>("QuestionID");

                    b.HasKey("ChoiceID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Exhibit", b =>
                {
                    b.Property<int>("ExhibitID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ExhibitID");

                    b.ToTable("Exhibits");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExhibitID");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Points");

                    b.Property<string>("Question1");

                    b.Property<int>("QuestionCategoryID");

                    b.Property<string>("QuestionType");

                    b.HasKey("QuestionID");

                    b.HasIndex("ExhibitID");

                    b.HasIndex("QuestionCategoryID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.QuestionCategory", b =>
                {
                    b.Property<int>("QuestionCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.HasKey("QuestionCategoryID");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.QuestionDuration", b =>
                {
                    b.Property<int>("QuestionDurationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnsweredTime");

                    b.Property<int>("LeaveTime");

                    b.Property<int>("RegistrationID");

                    b.Property<int>("RequestTime");

                    b.Property<int>("TestQuestionID");

                    b.HasKey("QuestionDurationID");

                    b.HasIndex("RegistrationID");

                    b.HasIndex("TestQuestionID");

                    b.ToTable("QuestionDurations");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Registration", b =>
                {
                    b.Property<int>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("StudentID");

                    b.Property<int>("TestID");

                    b.Property<Guid>("Token");

                    b.Property<DateTime>("TokenExpireTime");

                    b.HasKey("RegistrationID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.HasIndex("TestID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Email");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("Name");

                    b.Property<string>("PassHash");

                    b.Property<string>("Phone");

                    b.HasKey("StudentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DurationInMinute");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("TestID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.TestPaper", b =>
                {
                    b.Property<int>("TestPaperID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<int>("ChoiceID");

                    b.Property<string>("MarkScored");

                    b.Property<int>("RegistrationID");

                    b.Property<int>("TestQuestionID");

                    b.HasKey("TestPaperID");

                    b.HasIndex("ChoiceID");

                    b.HasIndex("RegistrationID");

                    b.HasIndex("TestQuestionID");

                    b.ToTable("TestPapers");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.TestQuestion", b =>
                {
                    b.Property<int>("TestQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<int>("QuestionID");

                    b.Property<int>("QuestionNumber");

                    b.Property<int>("TestID");

                    b.HasKey("TestQuestionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TestID");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Choice", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Question", "Questions")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Question", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Exhibit", "Exhibits")
                        .WithMany()
                        .HasForeignKey("ExhibitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.QuestionCategory", "QuestionCategorys")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam_Online.Models.Question.QuestionDuration", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Registration", "Registration")
                        .WithMany("QuestionDurations")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.TestQuestion", "TestQuestion")
                        .WithMany("QuestionDurations")
                        .HasForeignKey("TestQuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam_Online.Models.Question.Registration", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Student", "Students")
                        .WithOne("Registrations")
                        .HasForeignKey("Exam_Online.Models.Question.Registration", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.Test", "Tests")
                        .WithMany("Registrations")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam_Online.Models.Question.TestPaper", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Choice", "Choices")
                        .WithMany("TestPapers")
                        .HasForeignKey("ChoiceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.Registration", "Registrations")
                        .WithMany("TestPapers")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.TestQuestion", "TestQuestions")
                        .WithMany("TestPapers")
                        .HasForeignKey("TestQuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Exam_Online.Models.Question.TestQuestion", b =>
                {
                    b.HasOne("Exam_Online.Models.Question.Question", "Questions")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Exam_Online.Models.Question.Test", "Tests")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
